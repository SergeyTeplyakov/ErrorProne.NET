using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;

namespace RoslynNUnitTestRunner
{
    public static class CodeFixTestExtensions
    {
        public static TTest WithoutGeneratedCodeVerification<TTest>(this TTest test)
            where TTest : CodeFixTest<NUnitVerifier>
        {
            test.Exclusions &= ~AnalysisExclusions.GeneratedCode;
            return test;
        }

        public static TTest WithConfigureAwaitAttributes<TTest>(this TTest test)
            where TTest : CodeFixTest<NUnitVerifier>
        {
            (string filename, string content) file = ("ConfigureAwaitAttributes.cs", @"// <auto-generated/>
[System.AttributeUsage(System.AttributeTargets.Assembly)]
internal sealed class UseConfigureAwaitFalseAttribute : System.Attribute { }

[System.AttributeUsage(System.AttributeTargets.Assembly)]
internal sealed class DoNotUseConfigureAwaitAttribute : System.Attribute { }
");

            test.TestState.Sources.Add(file);

            if (test.FixedState.Sources.Count > 0)
            {
                test.FixedState.Sources.Add(file);
            }

            if (test.BatchFixedState.Sources.Count > 0)
            {
                test.BatchFixedState.Sources.Add(file);
            }

            return test;
        }
        
        public static TTest WithHiddenAllocationsAttributeDeclaration<TTest>(this TTest test)
            where TTest : CodeFixTest<NUnitVerifier>
        {
            (string filename, string content) file = ("HiddenAllocationAttributes.cs", @"// <auto-generated/>
[System.AttributeUsage(
    System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Constructor |System.AttributeTargets.Property,
    AllowMultiple = false,
    Inherited = true
)]
internal sealed class NoHiddenAllocations : System.Attribute {
    public bool Recursive;
}
");

            test.TestState.Sources.Add(file);

            if (test.FixedState.Sources.Count > 0)
            {
                test.FixedState.Sources.Add(file);
            }

            if (test.BatchFixedState.Sources.Count > 0)
            {
                test.BatchFixedState.Sources.Add(file);
            }

            return test;
        }
        
        public static TTest WithAssemblyLevelHiddenAllocationsAttribute<TTest>(this TTest test)
            where TTest : CodeFixTest<NUnitVerifier>
        {
            (string filename, string content) file = ("HiddenAllocationAttributes.cs", @"// <auto-generated/>
[assembly: NoHiddenAllocations]
");

            test.TestState.Sources.Add(file);

            if (test.FixedState.Sources.Count > 0)
            {
                test.FixedState.Sources.Add(file);
            }

            if (test.BatchFixedState.Sources.Count > 0)
            {
                test.BatchFixedState.Sources.Add(file);
            }

            return test;
        }
    }
}
